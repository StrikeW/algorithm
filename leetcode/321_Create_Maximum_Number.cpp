#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    vector<int> ret;
    void helper(vector<int>& nums1, vector<int>& nums2, int start1,int start2,int k,int lv) {
        if(lv==k){
            return ;
        }
        int range1=min(k-lv,int(nums1.size()-start1));
        int range2=min(k-lv,int(nums2.size()-start2));
        int target;
        int idx1=-1;
        int idx2=-1;
        for(target=9;target>=0;target--){
            if(target<ret[lv]){
                //impossible to find better solution
                return ;
            }
            bool found=false;
            for(int i=start1;i<start1+range1;i++){
                if(nums1[i]==target){
                    idx1=i;
                    found=true;
                    break;
                }
            }
            for(int i=start2;i<start2+range2;i++){
                if(nums2[i]==target){
                    idx2=i;
                    found=true;
                    break;
                }
            }
            if(found){
                break;
            }
        }
        if(idx1!=-1){
            if(ret[lv]<nums1[idx1]){
                for(int i=lv+1;i<ret.size();i++){
                    ret[i]=0;
                }
            }
            ret[lv]=nums1[idx1];
            helper(nums1,nums2,idx1+1,start2,k,lv+1);
        }
        if(idx2!=-1){
            if(ret[lv]<nums2[idx2]){
                for(int i=lv+1;i<ret.size();i++){
                    ret[i]=0;
                }
            }
            ret[lv]=nums2[idx2];
            helper(nums1,nums2,start1,idx2+1,k,lv+1);
        }
    }
    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {
        ret.clear();
        ret.resize(k);
        helper(nums1,nums2,0,0,k,0);
        return ret;
    }
};

int main(){
    int a[] = {3, 4, 6, 5};
	int a_len=sizeof(a)/sizeof(a[0]);
    vector<int> a_vec(a,a+a_len);
    int b[] = {9, 1, 2, 5, 8, 3};
	int b_len=sizeof(b)/sizeof(b[0]);
    vector<int> b_vec(b,b+b_len);
    Solution s;
    vector<int> result=s.maxNumber(a_vec,b_vec,5);
    for(int i=0;i<result.size();i++){
        cout<<result[i]<<endl;
    }
}



// int a[] = {8,9,7,3,5,9,1,0,8,5,3,0,9,2,7,4,8,9,8,1,0,2,0,2,7,2,3,5,4,7,4,1,4,0,1,4,2,1,3,1,5,3,9,3,9,0,1,7,0,6,1,8,5,6,6,5,0,4,7,2,9,2,2,7,6,2,9,2,3,5,7,4,7,0,1,8,3,6,6,3,0,8,5,3,0,3,7,3,0,9,8,5,1,9,5,0,7,9,6,8,5,1,9,6,5,8,2,3,7,1,0,1,4,3,4,4,2,4,0,8,4,6,5,5,7,6,9,0,8,4,6,1,6,7,2,0,1,1,8,2,6,4,0,5,5,2,6,1,6,4,7,1,7,2,2,9,8,9,1,0,5,5,9,7,7,8,8,3,3,8,9,3,7,5,3,6,1,0,1,0,9,3,7,8,4,0,3,5,8,1,0,5,7,2,8,4,9,5,6,8,1,1,8,7,3,2,3,4,8,7,9,9,7,8,5,2,2,7,1,9,1,5,5,1,3,5,9,0,5,2,9,4,2,8,7,3,9,4,7,4,8,7,5,0,9,9,7,9,3,8,0,9,5,3,0,0,3,0,4,9,0,9,1,6,0,2,0,5,2,2,6,0,0,9,6,3,4,1,2,0,8,3,6,6,9,0,2,1,6,9,2,4,9,0,8,3,9,0,5,4,5,4,6,1,2,5,2,2,1,7,3,8,1,1,6,8,8,1,8,5,6,1,3,0,1,3,5,6,5,0,6,4,2,8,6,0,3,7,9,5,5,9,8,0,4,8,6,0,8,6,6,1,6,2,7,1,0,2,2,4,0,0,0,4,6,5,5,4,0,1,5,8,3,2,0,9,7,6,2,6,9,9,9,7,1,4,6,2,8,2,5,3,4,5,2,4,4,4,7,2,2,5,3,2,8,2,2,4,9,8,0,9,8,7,6,2,6,7,5,4,7,5,1,0,5,7,8,7,7,8,9,7,0,3,7,7,4,7,2,0,4,1,1,9,1,7,5,0,5,6,6,1,0,6,9,4,2,8,0,5,1,9,8,4,0,3,1,2,4,2,1,8,9,5,9,6,5,3,1,8,9,0,9,8,3,0,9,4,1,1,6,0,5,9,0,8,3,7,8,5};
// int a_len=sizeof(a)/sizeof(a[0]);
// vector<int> a_vec(a,a+a_len);
// int b[] = {7,8,4,1,9,4,2,6,5,2,1,2,8,9,3,9,9,5,4,4,2,9,2,0,5,9,4,2,1,7,2,5,1,2,0,0,5,3,1,1,7,2,3,3,2,8,2,0,1,4,5,1,0,0,7,7,9,6,3,8,0,1,5,8,3,2,3,6,4,2,6,3,6,7,6,6,9,5,4,3,2,7,6,3,1,8,7,5,7,8,1,6,0,7,3,0,4,4,4,9,6,3,1,0,3,7,3,6,1,0,0,2,5,7,2,9,6,6,2,6,8,1,9,7,8,8,9,5,1,1,4,2,0,1,3,6,7,8,7,0,5,6,0,1,7,9,6,4,8,6,7,0,2,3,2,7,6,0,5,0,9,0,3,3,8,5,0,9,3,8,0,1,3,1,8,1,8,1,1,7,5,7,4,1,0,0,0,8,9,5,7,8,9,2,8,3,0,3,4,9,8,1,7,2,3,8,3,5,3,1,4,7,7,5,4,9,2,6,2,6,4,0,0,2,8,3,3,0,9,1,6,8,3,1,7,0,7,1,5,8,3,2,5,1,1,0,3,1,4,6,3,6,2,8,6,7,2,9,5,9,1,6,0,5,4,8,6,6,9,4,0,5,8,7,0,8,9,7,3,9,0,1,0,6,2,7,3,3,2,3,3,6,3,0,8,0,0,5,2,1,0,7,5,0,3,2,6,0,5,4,9,6,7,1,0,4,0,9,6,8,3,1,2,5,0,1,0,6,8,6,6,8,8,2,4,5,0,0,8,0,5,6,2,2,5,6,3,7,7,8,4,8,4,8,9,1,6,8,9,9,0,4,0,5,5,4,9,6,7,7,9,0,5,0,9,2,5,2,9,8,9,7,6,8,6,9,2,9,1,6,0,2,7,4,4,5,3,4,5,5,5,0,8,1,3,8,3,0,8,5,7,6,8,7,8,9,7,0,8,4,0,7,0,9,5,8,2,0,8,7,0,3,1,8,1,7,1,6,9,7,9,7,2,6,3,0,5,3,6,0,5,9,3,9,1,1,0,0,8,1,4,3,0,4,3,7,7,7,4,6,4,0,0,5,7,3,2,8,5,1,4,5,8,5,6,7,5,7,3,3,9,6,8,1,5,1,1,1,0,3};
// int b_len=sizeof(b)/sizeof(b[0]);
// vector<int> b_vec(b,b+b_len);
